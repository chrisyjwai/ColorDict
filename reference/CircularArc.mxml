<?xml version="1.0" encoding="utf-8"?>

<!--

-->

<s:Application 
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    applicationComplete="displayArc()" resize="if (initialized) displayArc()"
    viewSourceURL="srcview/index.html">
    
    <fx:Declarations>
        <fx:Number id="arcRadius">100</fx:Number>
        <fx:Number id="xCenter">{arcDisplay.width / 2.0}</fx:Number>
        <fx:Number id="yCenter">{arcDisplay.height / 2.0}</fx:Number>
        
        <fx:Component id="endPointElementFactory">
            <s:Group>
                <s:Ellipse width="10" height="10" left="-5" top="-5">
                    <s:fill>
                        <s:SolidColor color="0xFF0000" alpha="0.35"/>
                    </s:fill>
                </s:Ellipse>
            </s:Group>
        </fx:Component>
        
        <fx:Component id="controlPointElementFactory">
            <s:Group>
                <s:Ellipse width="10" height="10" left="-5" top="-5">
                    <s:fill>
                        <s:SolidColor color="blue" alpha="0.5"/>
                    </s:fill>
                </s:Ellipse>
            </s:Group>
        </fx:Component>
        
        <fx:Component id="pathElementFactory">
            <s:Path>
                <s:stroke>
                    <s:SolidColorStroke color="black" weight="3"/>
                </s:stroke>        
            </s:Path> 
        </fx:Component>    
    </fx:Declarations>       
    
    <s:controlBarContent>
        <s:VGroup>
            <s:HSlider id="angle1Slider" minimum="-359" maximum="359" value="0" valueCommit="displayArc()"/>
            <s:Label text="Start Angle: {angle1Slider.value}"/>
        </s:VGroup>
        <s:VGroup>
            <s:HSlider id="angle2Slider" minimum="-359" maximum="359" value="90" valueCommit="displayArc()"/>
            <s:Label text="End Angle: {angle2Slider.value}"/>
        </s:VGroup>
    </s:controlBarContent>
    
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke color="0XEEEEEE"/>
        </s:stroke>
    </s:Rect>      
    
    <s:Line left="3" right="3" y="{yCenter}">
        <s:stroke>
            <s:SolidColorStroke color="0XEEEEEE"/>
        </s:stroke>
    </s:Line>
    
    <s:Line top="3" bottom="3" x="{xCenter}">
        <s:stroke>
            <s:SolidColorStroke color="0XEEEEEE"/>
        </s:stroke>
    </s:Line>  
    
    <s:Line left="3" right="3" y="{yCenter}">
        <s:stroke>
            <s:SolidColorStroke color="0XEEEEEE"/>
        </s:stroke>
    </s:Line>
    
    <s:Line x="{xCenter}" y="{yCenter}" width="{arcRadius}"  rotation="{angle1Slider.value}" >
        <s:stroke>
            <s:SolidColorStroke color="0xA99E46" alpha="0.5"/>
        </s:stroke>
    </s:Line>   
    
    <s:Line x="{xCenter}" y="{yCenter}" width="{arcRadius}"  rotation="{angle2Slider.value}" >
        <s:stroke>
            <s:SolidColorStroke color="0X737D26" alpha="0.5"/>
        </s:stroke>
    </s:Line>      
    
    <s:Group id="arcDisplay" width="100%" height="100%"/>
    
    <fx:Script>
        <![CDATA[
            import mx.core.IVisualElement;
            
            import spark.components.Group;
            import spark.primitives.Path;
            
            private function createPointElement(factory:IFactory, x:Number, y:Number):IVisualElement
            {
                const elt:Group = factory.newInstance() as Group;
                elt.toolTip = x + ", " + y;
                elt.x = x + xCenter;
                elt.y = y + yCenter;
                return elt;
            }
            
            private function displayArc():void
            {
                const a1:Number = angle1Slider.value * (Math.PI / 180);
                const a2:Number = angle2Slider.value * (Math.PI / 180);
                const curves:Array = createArc(arcRadius, a1, a2);
                var pathData:String = null;
                
                arcDisplay.removeAllElements();
                for each (var curve:Object in curves)
                {
                    arcDisplay.addElement(createPointElement(endPointElementFactory, curve.x1, curve.y1));
                    arcDisplay.addElement(createPointElement(controlPointElementFactory, curve.x2, curve.y2));
                    arcDisplay.addElement(createPointElement(controlPointElementFactory, curve.x3, curve.y3));
                    arcDisplay.addElement(createPointElement(endPointElementFactory, curve.x4, curve.y4));
                    
                    if (!pathData)
                        pathData =  "M " + (curve.x1 + xCenter) + " " + (curve.y1 + yCenter);
                    
                    pathData += 
                        " C " + (curve.x2 + xCenter) + " " + (curve.y2 + yCenter) + 
                        " " +   (curve.x3 + xCenter) + " " + (curve.y3 + yCenter) + 
                        " " +   (curve.x4 + xCenter) + " " + (curve.y4 + yCenter); 
                }
                
                const pathElement:Path = pathElementFactory.newInstance() as Path;
                pathElement.data = pathData;
                arcDisplay.addElement(pathElement);
            }
            
            private static const EPSILON:Number = 0.00001;  // Roughly 1/1000th of a degree, see below
            
            /**
             *  Return a array of objects that represent bezier curves which approximate the 
             *  circular arc centered at the origin, from startAngle to endAngle (radians) with 
             *  the specified radius.
             *  
             *  Each bezier curve is an object with four points, where x1,y1 and 
             *  x4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's 
             *  control points.
             */
            public static function createArc(radius:Number, startAngle:Number, endAngle:Number):Array
            {
                // normalize startAngle, endAngle to [-2PI, 2PI]
                
                const twoPI:Number = Math.PI * 2;
                startAngle = startAngle % twoPI
                endAngle = endAngle % twoPI;
                
                // Compute the sequence of arc curves, up to PI/2 at a time.  Total arc angle
                // is less than 2PI.
                
                const curves:Array = [];
                const piOverTwo:Number = Math.PI / 2.0;
                const sgn:Number = (startAngle < endAngle) ? 1 : -1;
                
                var a1:Number = startAngle;
                for (var totalAngle:Number = Math.min(twoPI, Math.abs(endAngle - startAngle)); totalAngle > EPSILON; ) 
                {
                    var a2:Number = a1 + sgn * Math.min(totalAngle, piOverTwo);
                    curves.push(createSmallArc(radius, a1, a2));
                    totalAngle -= Math.abs(a2 - a1);
                    a1 = a2;
                }
                
                return curves;
            }
            
            /**
             *  Cubic bezier approximation of a circular arc centered at the origin, 
             *  from (radians) a1 to a2, where a2-a1 < pi/2.  The arc's radius is r.
             * 
             *  Returns an object with four points, where x1,y1 and x4,y4 are the arc's end points
             *  and x2,y2 and x3,y3 are the cubic bezier's control points.
             * 
             *  This algorithm is based on the approach described in:
             *  A. RiÅ¡kus, "Approximation of a Cubic Bezier Curve by Circular Arcs and Vice Versa," 
             *  Information Technology and Control, 35(4), 2006 pp. 371-378.
             */
            private static function createSmallArc(r:Number, a1:Number, a2:Number):Object
            {
                // Compute all four points for an arc that subtends the same total angle
                // but is centered on the X-axis
                
                const a:Number = (a2 - a1) / 2.0; // 
                
                const x4:Number = r * Math.cos(a);
                const y4:Number = r * Math.sin(a);
                const x1:Number = x4;
                const y1:Number = -y4
                
                const k:Number = 0.5522847498;
                const f:Number = k * Math.tan(a);
                
                const x2:Number = x1 + f * y4;
                const y2:Number = y1 + f * x4;
                const x3:Number = x2; 
                const y3:Number = -y2;
                
                // Find the arc points actual locations by computing x1,y1 and x4,y4 
                // and rotating the control points by a + a1
                
                const ar:Number = a + a1;
                const cos_ar:Number = Math.cos(ar);
                const sin_ar:Number = Math.sin(ar);
                
                return {
                    x1: r * Math.cos(a1), 
                        y1: r * Math.sin(a1), 
                        x2: x2 * cos_ar - y2 * sin_ar, 
                        y2: x2 * sin_ar + y2 * cos_ar, 
                        x3: x3 * cos_ar - y3 * sin_ar, 
                        y3: x3 * sin_ar + y3 * cos_ar, 
                        x4: r * Math.cos(a2), 
                        y4: r * Math.sin(a2)};
            }
            
        ]]>
    </fx:Script>
</s:Application>